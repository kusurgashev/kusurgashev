#include "pch.h"
#include <iostream>
using namespace std;

template<typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);
	void pop_front();
	void clear();
	int GetSize()
	{
		return Size;
	}

	T& operator[] (const int index);

private:

	template<typename T>
	class Node
	{
	public:
		Node *pNext;
		T data;
		Node(T data = T(), Node *pNext = nullptr) {
			this->data = data;
			this->pNext = pNext;
		}
	};

	int Size;
	Node<T> *head;
};

template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}

template<typename T>
List<T>::~List()
{
	
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr) 
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T> *current = this->head;
		while (current->pNext != nullptr) {
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}

	Size++;
}

template<typename T>
T & List<T>::operator[](const int index)
{
	Node<T> *current = this->head;
	int count = 0;

	while (current != nullptr) {

		if (count == index) {
			return current->data;
		}

		current = current->pNext;
		count++;

	}
}

template<typename T>
void List<T>::pop_front() 
{
	Node<T> *temp = head;

	head = head->pNext;

	delete temp;

	Size--;
}

template<typename T>
void List<T>::clear()
{
	while (Size) {
		pop_front();
	}
}

int main() 
{
	List<int> lst;

	lst.push_back(5);
	lst.push_back(10);
	lst.push_back(20);
	lst.push_back(27);

	for (int i = 0; i < lst.GetSize(); i++)
	{
		cout << lst[i] << endl;
	}

	cout << endl;
	lst.pop_front();

	for (int i = 0; i < lst.GetSize(); i++)
	{
		cout << lst[i] << endl;
	}
	
	lst.clear();
}
